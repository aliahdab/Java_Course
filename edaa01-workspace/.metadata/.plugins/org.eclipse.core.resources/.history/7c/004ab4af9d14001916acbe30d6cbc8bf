package mountain;

import java.util.HashMap;
import java.util.Map;

import fractal.Fractal;
import fractal.TurtleGraphics;

public class Mountain extends Fractal {

	private Point p1;
	private Point p2;
	private Point p3;
	private double length;
	private double dev;
	private Map<Side, Point> map;

	public Mountain(int length, double dev) {
		super();
		this.length = length;
		this.dev = dev;
		map = new HashMap<Side, Point>();

	}

	@Override
	public String getTitle() {

		return "Kochs Monutain";
	}

	@Override
	public void draw(TurtleGraphics turtle) {

		double alpha = 0;
		turtle.moveTo(turtle.getWidth() / 2.0 - length / 2.0, turtle.getHeight() / 2.0 + Math.sqrt(3.0) * length / 4.0);
		turtle.penUp();
		p1 = new Point((int) turtle.getX(), (int) turtle.getY());
		turtle.setDirection(-alpha);
		turtle.forward(length - 52);
		p2 = new Point((int) turtle.getX(), (int) turtle.getY());
		turtle.setDirection(-alpha + 120);
		turtle.forward(length + 90);
		p3 = new Point((int) turtle.getX(), (int) turtle.getY());
		turtle.setDirection(-alpha + 240);
		turtle.forward(length + 134);
		fractalTriangle(turtle, order, length, p1, p2, p3);

	}

	private void fractalTriangle(TurtleGraphics turtle, int order, double length, Point p1, Point p2, Point p3) {
		double d = RandomUtilities.randFunc(dev);
//			System.out.println(d);
		Point p4;
		Point p5;
		Point p6;
		if (order == 0) {
			turtle.moveTo(p1.getX(), p1.getY());
			turtle.penDown();
			turtle.forwardTo(p2.getX(), p2.getY());
			turtle.forwardTo(p3.getX(), p3.getY());
			turtle.forwardTo(p1.getX(), p1.getY());
			turtle.penUp();
		} else {
			Side side1 = new Side(p1, p2);
			Side side2 = new Side(p2, p3);
			Side side3 = new Side(p3, p1);
			if (map.containsKey(side1)) {
				System.out.println("test1");
				p4 = map.get(side1);
				map.remove(side1);
			} else {
				p4 = new Point(((p1.getX() + p2.getX()) / 2), (int) (((p1.getY() + p2.getY()) / 2) + d));
				map.put(side1, p1);
			}

			if (map.containsKey(side2)) {
				System.out.println("test2");
				p5 = map.get(side2);
				map.remove(side2);
			} else {
				p5 = new Point(((p2.getX() + p3.getX()) / 2), (int) (((p2.getY() + p3.getY()) / 2) + d));
				map.put(side2, p5);
			}
			if (map.containsKey(side3)) {
				System.out.println("test3");
				p6 = map.get(side3);
				map.remove(side3);
			} else {
				p6 = new Point(((p3.getX() + p1.getX()) / 2), (int) (((p3.getY() + p1.getY()) / 2) + d));
				map.put(side3, p6);
			}
			fractalTriangle(turtle, order - 1, length, p4, p2, p5);
			fractalTriangle(turtle, order - 1, length, p4, p6, p1);
			fractalTriangle(turtle, order - 1, length, p4, p5, p6);
			fractalTriangle(turtle, order - 1, length, p5, p3, p6);

		}

	}

}
