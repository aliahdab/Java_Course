import se.lth.cs.pt.maze.Maze;

public class MazeWalker {
	private Turtle turtle;

	public MazeWalker(Turtle turtle) {
		this.turtle = turtle;

	}

	public void walk(Maze maze) {
		turtle.jumpTo(maze.getXEntry(), maze.getYEntry());

		while (!maze.atExit(turtle.getX(), turtle.getY())) {
			if (maze.wallAtLeft(turtle.getDirection(), turtle.getX(), turtle.getY())
					&& !maze.wallInFront(turtle.getDirection(), turtle.getX(), turtle.getY())) {
				turtle.penDown();
				turtle.forward(1);
			} else if (!maze.wallAtLeft(turtle.getDirection(), turtle.getX(), turtle.getY())
					&& maze.wallInFront(turtle.getDirection(), turtle.getX(), turtle.getY())) {
				turtle.left(-90);
				turtle.forward(1);
				turtle.penDown();
				
			} else if (maze.wallAtLeft(turtle.getDirection(), turtle.getX(), turtle.getY())
					&& !maze.wallInFront(turtle.getDirection(), turtle.getX(), turtle.getY())) {
				turtle.left(180);
				turtle.forward(1);
				turtle.penDown();

			} else {
				turtle.left(90);
				turtle.forward(1);
				turtle.penDown();

			}
		}
	}
}